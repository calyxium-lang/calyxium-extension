{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "calyxium",
	"patterns": [
		{
			"include": "#numbers"
		},
    	{
			"include": "#err"
		},
		{
			"include": "#big_comments"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
    	{
			"include": "#functions"
		},
		{
			"include": "#function_calls"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#primitives"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#characters"
		},
		{
			"include": "#constants"
		}
	],
	"repository": {
		"err": {
			"patterns": [
				{
					"name": "invalid.illegal",
					"match": "[0-9]+([A-Za-z_]+|[A-Za-z_]+[A-Za-z0-9_]*)"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.comparison.calyxiumHover",
					"match": "(==|!=|<=|>=|<|>)"
				},
				{
					"name": "keyword.operator.logical.calyxiumHover",
					"match": "(\\!|&&|\\|\\|)"
				},
				{
					"name": "keyword.operator.arithmetic.calyxiumHover",
					"match": "(\\*\\*|\\+\\+|\\+=|-=|\\*=|/=|\\+|-|\\*|/|%)"
				},
				{
					"name": "keyword.operator.assignment.calyxiumHover",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.bitwise.calyxiumHover",
					"match": "(\\||\\^)"
				},
				{
					"name": "keyword.operator.bitshift.calyxiumHover",
					"match": "(<<=|>>=)"
				},
				{
					"name": "keyword.operator.bitwise.assignment.calyxiumHover",
					"match": "(&=|\\|=|\\^=|`=|\\$=|<<=|>>=)"
				},
				{
					"name": "keyword.operator.match.calyxiumHover",
					"match": "(->)"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b(0b[01_]+|0x[0-9a-fA-F_]+|\\d[\\d_]*(\\.\\d[\\d_]*)?([eE][+-]?\\d+)?)([fFdD]?)\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b(0b[01_]+|0x[0-9a-fA-F_]+|\\d[\\d_]*(\\.\\d[\\d_]*)?([eE][+-]?\\d+)?)([fFdD]?)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.calyxiumHover",
					"match": "\\b(ref|rec|if|then|else|let|use|with|for|match|enum|mod|struct|class|extends|in|type)\\b"
				},
				{
					"name": "keyword.control.calyxiumHover",
					"match": "\\b(lsl|lsr|land|lor|lnot|lxor|not)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.calyxiumHover",
					"match": "([A-Za-z]+[A-Za-z0-9_]*)--"
				},
				{
					"name": "comment.block.documentation.calyxiumHover",
					"match": "--\\s\\$.*\\$"
				},
				{
					"name": "comment.line.double-dash.calyxiumHover",
					"match": "--.*$"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.calyxiumHover",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.calyxiumHover",
					"match": "\\\\."
				}
			]
		},
		"characters": {
			"patterns": [
				{
					"match": "(('\\\\\\d')|('(\\\\.)')|('.{2,}')|('')|('.'))",
					"captures": {
						"2": {
							"name": "invalid.illegal"
						},
						"3": {
							"name": "string.quoted.double.calyxiumHover"
						},
						"4": {
							"name": "constant.character.escape.calyxiumHover"
						},
						"5": {
							"name": "invalid.illegal"
						},
						"6": {
							"name": "invalid.illegal"
						},
						"7": {
							"name": "string.quoted.double.calyxiumHover"
						}
					}
				}
			]
		},
		"constants": {
			"name": "constant.language.calyxiumHover",
			"match": "\\b(true|false)\\b"
		},
		"primitives": {
			"name": "storage.type.primitive.calyxiumHover",
			"match": "\\b(any|unit|int|float|string|bool|byte)\\b"
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function",
					"match": "((panic|print|to_float|to_int|to_string|to_bytes|length|input|assert|of_type)(\\(|))"
				}
			]
		},
		"function_calls": {
			"patterns": [
				{
					"name": "support.function",
					"match": "([A-Za-z]+[A-Za-z0-9_$]*)\\s*\\("
				},
				{
					"match": "(\\|>)\\s*([A-Za-z]+[A-Za-z0-9_$]*)",
					"captures": {
						"1": {
							"name": "keyword.operator.pipeline.calyxiumHover"
						},
						"2": {
							"name": "support.function"
						}
					}
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "support.variable",
					"match": "'*[A-Za-z]+[A-Za-z0-9_$]*'*"
				}
			]
		}
	},
	"scopeName": "source.calyxiumHover"
}